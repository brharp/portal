<!--
     This is the build.xml for uPortal which can be used in
     conjunction with Ant (http://ant.apache.org/) to
     build, deploy, and distribute the uPortal project. Type
     "ant -projecthelp" to see a list of ant targets.

     Notes:

     You shouldn't need to modify this file.  Instead, modify
     build.properties which contains configurable paths to jar
     files and other resources.

     "ant initportal" will deploy uPortal and load your database,
     but you must first set up the JDBC properties in 
     rdbm.properties and possibly PersonDirs.xml, 
     both of which are in the properties directory.

     Author: Ken Weiner, kweiner@unicon.net
     Version $Revision: 1.2 $
-->

<!-- A "project" describes a set of targets that may be requested
     when Ant is executed.  The "default" attribute defines the
     target which is executed if no specific target is requested,
     and the "basedir" attribute defines the current working directory
     from which Ant executes the requested task.  This is normally
     set to the current working directory.
-->


<project name="SamplePortlet" default="compile" basedir=".">


<!-- ===================== Property Definitions =========================== -->

<!--

  Each of the following properties are used in the build script.
  Values for these properties are set by the first place they are
  defined, from the following list:
  * Definitions on the "ant" command line (ant -Ddeploy.home=xyz compile)
  * Definitions from a "build.properties" file in the top level
    source directory
  * Definitions from a "build.properties" file in the developer's
    home directory
  * Default definitions in this build.xml file

  You will note below that property values can be composed based on the
  contents of previously defined properties.  This is a powerful technique
  that helps you minimize the number of changes required when your development
  environment is modified.  Note that property composition is allowed within
  "build.properties" files as well as in the "build.xml" script.

-->

  <!-- Load user property definition overrides -->
  <property file="build.properties"/>
  <property file="${user.home}/build.properties"/>


<!-- ==================== File and Directory Names ======================== -->

<!--

  These properties generally define file and directory names (or paths) that
  affect where the build process stores its outputs.

  app.name             Base name of this application, used to
                       construct filenames and directories.
                       Defaults to "myapp".

  app.version          Version identifier for this application.

  build.home           The directory into which the "prepare" and
                       "compile" targets will generate their output.
                       Defaults to "build".
                       
  server.home          The root directory of the application server
                       or servlet container such as Tomcat.

  deploy.home          The name of the directory into which the
                       deployment hierarchy will be created, and into
                       which the build directory will be copied.
                       Usually "{your_servlet_container_home}/webapps/{app.name}".

  dist.home            The name of the base directory in which
                       distribution files are created.
                       Defaults to "dist".

-->

  <property name="app.name"      value="(set this in build.properties!)"/>
  <property name="app.version"   value="(set this in build.properties!)"/>
  <property name="build.home"    value="build"/>
  <property name="server.home"   value="(set this in build.properties!)"/>
  <property name="deploy.home"   value="(set this in build.properties!)"/>
  <property name="dist.home"     value="dist"/>



<!--  ==================== Compilation Control Options ==================== -->

<!--

  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?

  compile.deprecation  Should compilation include the deprecation option?

  compile.optimize     Should compilation include the optimize option?

-->

  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="false"/>
  <property name="compile.optimize"    value="true"/>



<!-- ==================== External Dependencies =========================== -->


<!--

  Use property values to define the locations of external JAR files on which
  your application will depend.  In general, these values will be used for
  two purposes:
  * Inclusion on the classpath that is passed to the Javac compiler
  * Being copied into the "/WEB-INF/lib" directory during execution
    of the "deploy" target.

  Because we will automatically include all of the Java classes that Tomcat 4
  exposes to web applications, we will not need to explicitly list any of those
  dependencies.  You only need to worry about external dependencies for JAR
  files that you are going to include inside your "/WEB-INF/lib" directory.

  This version of uPortal requires the following jars:

  xalan.jar            Xalan is an XSLT processor for transforming XML documents
                       into HTML, text, or other XML document types.
                       IMPORTANT: See the following web pages that describe
                       the steps you need to take to ensure that the appropriate
                       version of Xalan is being used in your environment:
                       JDK 1.3: http://xml.apache.org/xalan-j/faq.html#faq-N100AF
                       JDK 1.4: http://xml.apache.org/xalan-j/faq.html#faq-N100CC
                       Version: 2.6.0
                       URL: http://xml.apache.org/xalan-j/

  xercesImpl.jar       Xerces2 is the next generation of high performance,
                       fully compliant XML parsers in the Apache Xerces family.
                       Be sure to use the version of XercesImpl that comes with
                       the Xalan you are using.
                       Version: (depends on Xalan version)
                       URL: http://xml.apache.org/xerces2-j/

  xml-apis.jar         SAX, DOM, and JAVAX interfaces which have been recently
                       separated from the xalan and xerces jars.
                       Be sure to use the version of xml-apis.jar that comes with
                       the Xalan you are using.
                       Version: (depends on Xalan version)
                       URL: http://xml.apache.org/xalan-j/

  tidy.jar             Turns HTML into well formed XHTML. There is a problem with
                       the current release that shows up when uPortal is deployed
                       in certain web containers including Tomcat 4.0.x.
                       For information, see http://www.mun.ca/cc/portal/cw/#depend or
                       download tidy.jar directly from http://www.mun.ca/cc/portal/cw/tidy.jar
                       Used by the CWebProxy channel.
                       Version: 04aug2000r6 or fixed version     (see above)
                       URL: http://jtidy.sourceforge.net/
                            http://www.mun.ca/cc/portal/cw/#depend   (see above)

  tyrex.jar            An in-memory JNDI implementation.
                       Version: 1.0.1
                       URL: http://tyrex.sourceforge.net/

  activation.jar       JavaBeans Activation Framework. Used by MultiPartDataSource.
                       Version: 1.0.2
                       URL: http://java.sun.com/products/javabeans/glasgow/jaf.html

  log4j.jar            Logging package used by uPortal.
                       Version: 1.2.8
                       URL: http://jakarta.apache.org/log4j/

  jaas.jar             The Java Authentication and Authorization Service (JAAS)
                       is a Java package that enables services to authenticate
                       and enforce access controls upon users.  This is only
                       needed for JDK's less than 1.4.  It is included with JDK 1.4.
                       Version: 1.0
                       URL: http://java.sun.com/products/jaas/

  cos.jar              Servlet support classes including file upload package
                       MultipartRequest and MultipartParser. Used by the portal
                       to make file uploads possible.
                       Version: 05Nov2002
                       URL: http://www.servlets.com/cos/

  oro.jar              A set of text-processing Java classes that provide Perl5
                       compatible regular expressions.
                       Version: 2.0.8
                       URL: http://jakarta.apache.org/oro/

  axis.jar             Web services support. Axis is the next generation of the
                       Apache SOAP project which itself followed IBM's SOAP4J.
                       Version: 1.1
                       URL: http://ws.apache.org/axis/

  jaxrpc.jar           Java API for XML-Based RPC - needed for Axis.
                       Use the version that comes with Axis.
                       Version: (depends on Axis version)
                       URL: http://java.sun.com/xml/jaxrpc/

  saaj.jar             SOAP with Attachments API for Java (SAAJ) - needed for Axis.
                       Use the version that comes with Axis.
                       Version: (depends on Axis version)
                       URL: http://java.sun.com/xml/javaxmlpack.html

  wsdl4j.jar           Web Services Description Language for Java Toolkit developed
                       by IBM - needed for Axis.
                       Use the version that comes with Axis.
                       Version: (depends on Axis version)
                       URL: http://oss.software.ibm.com/developerworks/projects/wsdl4j/
                       
  commons-discovery.jar
                       The Discovery component, from the Apache Commons project,
                       is about discovering, or finding, implementations for
                       pluggable interfaces - needed for Axis.
                       Use the version that comes with Axis.
                       Version: (depends on Axis version)
                       URL: http://jakarta.apache.org/commons/discovery.html

  commons-logging.jar  Logging components from the Apache Commons project - needed
                       for Axis. Use the version that comes with Axis.
                       Version: (depends on Axis version)
                       URL: http://jakarta.apache.org/commons/logging.html
                       
  portlet-api.jar      Portlet API based on JSR-168.
                       Version: (from jakarta-pluto CVS on November 2, 2004)
                       URL: http://www.jcp.org/en/jsr/detail?id=168
  
  pluto.jar            Reference Implementation of the Java Portlet Specfication.
                       This Portlet container provides a runtime environment for 
                       portlets implemented according to the Portlet API.
                       The project is still in the Apache Incubator.
                       Version: (from jakarta-pluto CVS on November 2, 2004)
                       URL: http://portals.apache.org/pluto/

  wsrp4j-shared.jar    WSRP4J shared classes mostly derived from OASIS WSRP WSDL.
                       Comes with WSRP4J.
                       Use the version that comes with WSRP4J.
                       Version: (from ws-wsrp4j CVS on November 2, 2004)
                       URL: http://ws.apache.org/wsrp4j/

  wsrp4j-consumer.jar  WSRP4J consumer classes.
                       Comes with WSRP4J.
                       Version: (same as wsrp4j-shared.jar version)
                       URL: http://ws.apache.org/wsrp4j/

  proxyportlet.jar     WSRP4J Consumer Proxy Portlet.
                       Comes with WSRP4J.
                       Version: (same as wsrp4j-shared.jar version)
                       
                       The following modifications were made to the
                       WSRP4J proxy portlet source:
                             
                       - portlet.xml
                       
                          IS: <portlet-class>org.jasig.portal.wsrp.consumer.portlet.ProxyPortlet</portlet-class>
                         WAS: <portlet-class>org.apache.wsrp4j.consumer.portlet.impl.ProxyPortlet</portlet-class>

                          IS: <value>org.jasig.portal.wsrp.consumer.portlet.ConsumerEnvironmentImpl</value>
                         WAS: <value>org.apache.wsrp4j.consumer.portlet.impl.ConsumerEnvironmentImpl</value>
        
                       - wsrp4j-logger.properties
                       
                          IS: log4j.appender.A1.File=wsrp4j-consumer.log
                         WAS: log4j.appender.A1.File=@HOME@/logs/wsrp4j-consumer.log

                       
                       URL: http://ws.apache.org/wsrp4j/

  jdbc2_0-stdext.jar   JDBC 2.0 Standard Extension.  Needed for use of
                       javax.sql.* package. This is only needed for JDK's less than 1.4.
                       It is included with JDK 1.4.
                       Version: 2.0
                       URL: http://java.sun.com/products/jdbc/

  jdbcDriver.jar       This should contain the JDBC driver for whatever relational
                       database you plan to use.  For development, HypersonicSQL is
                       a nice choice.  For production, you probably want something
                       more robust like Oracle or PostgreSQL.
                       Version: (depends on your database)
                       URL: (depends on your database)
                       
  hsqldb.jar           Comes with uPortal only as a convenience.  It can and
                       probably should be replaced with another database driver.
                       Version: 1.7.2.4
                       URL: http://hsqldb.sourceforge.net

  junit.jar            JUnit is a regression testing framework.  It is used
                       to implement unit tests in Java.
                       Version: 3.8.1
                       URL: http://www.junit.org/
                       
  servlet.jar          Contains the javax.servlet APIs.  This is usually supplied
                       by your servlet container.
                       Version: 2.2, 2.3, or 2.4
                       URL: http://jakarta.apache.org/tomcat/

-->

  <property name="xalan.jar" value="(set this in build.properties!)"/>
  <property name="xercesImpl.jar" value="(set this in build.properties!)"/>
  <property name="xml-apis.jar" value="(set this in build.properties!)"/>
  <property name="tidy.jar" value="(set this in build.properties!)"/>
  <property name="tyrex.jar" value="(set this in build.properties!)"/>
  <property name="activation.jar" value="(set this in build.properties!)"/>
  <property name="log4j.jar" value="(set this in build.properties!)"/>
  <property name="jaas.jar" value="(set this in build.properties!)"/>
  <property name="cos.jar" value="(set this in build.properties!)"/>
  <property name="oro.jar" value="(set this in build.properties!)"/>
  <property name="axis.jar" value="(set this in build.properties!)"/>
  <property name="jaxrpc.jar" value="(set this in build.properties!)"/>
  <property name="saaj.jar" value="(set this in build.properties!)"/>
  <property name="wsdl4j.jar" value="(set this in build.properties!)"/>
  <property name="commons-discovery.jar" value="(set this in build.properties!)"/>
  <property name="commons-logging.jar" value="(set this in build.properties!)"/>
  <property name="portlet-api.jar" value="(set this in build.properties!)"/>
  <property name="pluto.jar" value="(set this in build.properties!)"/>
  <property name="wsrp4j-shared.jar" value="(set this in build.properties!)"/>
  <property name="wsrp4j-consumer.jar" value="(set this in build.properties!)"/>
  <property name="proxyportlet.jar" value="(set this in build.properties!)"/>
  <property name="jdbc2_0-stdext.jar" value="(set this in build.properties!)"/>
  <property name="jdbcDriver.jar" value="(set this in build.properties!)"/>
  <property name="junit.jar" value="(set this in build.properties!)"/>
  <property name="servlet.jar" value="(set this in build.properties!)"/>



<!-- ==================== Compilation Classpath =========================== -->

<!--

  Rather than relying on the CLASSPATH environment variable, Ant includes
  features that makes it easy to dynamically construct the classpath you
  need for each compilation.  The example below constructs the compile
  classpath to include the servlet.jar file, as well as the other components
  that Tomcat makes available to web applications automatically, plus anything
  that you explicitly added.

-->

  <path id="compile.classpath">

    <!-- Include all JAR files that will be included in /WEB-INF/lib -->
    <pathelement location="${xalan.jar}"/>
    <pathelement location="${xercesImpl.jar}"/>
    <pathelement location="${xml-apis.jar}"/>
    <pathelement location="${tidy.jar}"/>
    <pathelement location="${tyrex.jar}"/>
    <pathelement location="${activation.jar}"/>
    <pathelement location="${log4j.jar}"/>
    <pathelement location="${jaas.jar}"/>
    <pathelement location="${cos.jar}"/>
    <pathelement location="${oro.jar}"/>
    <pathelement location="${axis.jar}"/>
    <pathelement location="${jaxrpc.jar}"/>
    <pathelement location="${saaj.jar}"/>
    <pathelement location="${wsdl4j.jar}"/>
    <pathelement location="${commons-discovery.jar}"/>
    <pathelement location="${commons-logging.jar}"/>
    <pathelement location="${portlet-api.jar}"/>
    <pathelement location="${pluto.jar}"/>
    <pathelement location="${wsrp4j-shared.jar}"/>
    <pathelement location="${wsrp4j-consumer.jar}"/>
    <pathelement location="${proxyportlet.jar}"/>
    <pathelement location="${jdbc2_0-stdext.jar}"/>
    <pathelement location="${jdbcDriver.jar}"/>
    <pathelement location="${servlet.jar}"/>

  </path>



<!-- ====================== Tests Classpath =============================== -->

<!--

  Classpath for uPortal test code.

-->

  <path id="tests.classpath">
    <path refid="compile.classpath"/>
    <pathelement location="${junit.jar}"/>
  </path>



<!-- ==================== All Target ====================================== -->

<!--

  The "all" target is a shortcut for running the "clean" target followed
  by the "compile" target, to force a complete recompile.

-->

  <target name="all" depends="clean,compile"
   description="Clean build and dist, then compile"/>



<!-- ==================== Clean Target ==================================== -->

<!--

  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.

-->

  <target name="clean"
   description="Delete old build and dist directories">
    <delete dir="${build.home}"/>
    <delete dir="${dist.home}"/>
    <delete dir="${deploy.home}"/>
  </target>



<!-- ==================== Compile Target ================================== -->

<!--

  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
  This example assumes that you will be including your classes in an
  unpacked directory hierarchy under "/WEB-INF/classes".

-->

  <target name="compile" depends="prepare"
   description="Compile Java sources">

    <!-- Compile Java classes as necessary -->
    <mkdir    dir="${build.home}/WEB-INF/classes"/>
    <javac srcdir="source"
          destdir="${build.home}/WEB-INF/classes"
            debug="${compile.debug}"
      deprecation="${compile.deprecation}"
         optimize="${compile.optimize}">
      <classpath refid="compile.classpath"/>
    </javac>

    <!-- Copy non-java resources -->
    <copy  todir="${build.home}/WEB-INF/classes">
      <fileset dir="source" excludes="CVS,**/*.java"/>
    </copy>
      
    <!-- Copy associated resource files -->
    <copy  todir="${build.home}/WEB-INF/classes/properties">
      <fileset dir="properties" includes="**/*"/>
    </copy>

    <!-- Copy everything in media except for files that are accessible from the web -->
    <copy  todir="${build.home}/WEB-INF/classes">
      <fileset dir="webpages/media" excludes="CVS,**/*.gif,**/*.jpg,**/*.css"/>
    </copy>
    
    
  </target>



<!-- ==================== Deploy Target =================================== -->

<!--

  The "deploy" target copies the contents of the build directory into a
  location required by our servlet container, and picks up any external
  dependencies along the way.  AFter restarting the servlet container, you
  can now test your web application.

-->

  <target name="deploy" depends="compile"
   description="Deploy application to servlet container">

    <!-- Copy the contents of the build directory -->
    <mkdir     dir="${deploy.home}"/>
    <copy    todir="${deploy.home}">
      <fileset dir="${build.home}" excludes="stylesheets/**"/>
    </copy>

    <!-- Copy external dependencies as required -->
    <mkdir  dir="${deploy.home}/WEB-INF/lib"/>
    <copy todir="${deploy.home}/WEB-INF/lib" file="${xercesImpl.jar}"/>
    <copy todir="${deploy.home}/WEB-INF/lib" file="${xml-apis.jar}"/>
    <copy todir="${deploy.home}/WEB-INF/lib" file="${tidy.jar}"/>
    <copy todir="${deploy.home}/WEB-INF/lib" file="${tyrex.jar}"/>
    <copy todir="${deploy.home}/WEB-INF/lib" file="${activation.jar}"/>
    <copy todir="${deploy.home}/WEB-INF/lib" file="${log4j.jar}"/>
    <copy todir="${deploy.home}/WEB-INF/lib" file="${jaas.jar}"/>
    <copy todir="${deploy.home}/WEB-INF/lib" file="${cos.jar}"/>
    <copy todir="${deploy.home}/WEB-INF/lib" file="${oro.jar}"/>
    <copy todir="${deploy.home}/WEB-INF/lib" file="${axis.jar}"/>
    <copy todir="${deploy.home}/WEB-INF/lib" file="${jaxrpc.jar}"/>
    <copy todir="${deploy.home}/WEB-INF/lib" file="${saaj.jar}"/>
    <copy todir="${deploy.home}/WEB-INF/lib" file="${wsdl4j.jar}"/>
    <copy todir="${deploy.home}/WEB-INF/lib" file="${commons-discovery.jar}"/>
    <copy todir="${deploy.home}/WEB-INF/lib" file="${commons-logging.jar}"/>
    <copy todir="${deploy.home}/WEB-INF/lib" file="${jdbc2_0-stdext.jar}"/>
    <copy todir="${deploy.home}/WEB-INF/lib" file="${jdbcDriver.jar}"/>
    
    <!-- There are Tomcat-specific!  We need to think about a new property
         that lets us specify the appropriate directory for other servers
    -->
    <copy todir="${server.home}/shared/lib" file="${portlet-api.jar}"/>
    <copy todir="${server.home}/shared/lib" file="${pluto.jar}"/>
    <copy todir="${server.home}/common/endorsed" file="${xalan.jar}"/>
    
    <!-- This is Tomcat-specific and server name-specific!  
         We need to find out the best way to ensure cross-context 
         behavior in all servlet containers.
    -->
    <copy todir="${server.home}/conf/Catalina/localhost" file="properties/uPortal.xml"/>
    <copy todir="${server.home}/conf/Catalina/localhost" file="properties/proxyportlet.xml"/>
  	
  	<!-- Deploy classes to support the modified version of WSRP4J's proxyportlet.
  	     Consider making these classes part of the proxyportlet.war distribution.
  	-->
    <mkdir     dir="${deploy.home}/../proxyportlet/WEB-INF/classes/org/jasig/portal/wsrp/consumer/portlet"/>
    <copy    todir="${deploy.home}/../proxyportlet/WEB-INF/classes/org/jasig/portal/wsrp/consumer/portlet">
      <fileset dir="${build.home}/WEB-INF/classes/org/jasig/portal/wsrp/consumer/portlet"/>
    </copy>

  </target>



<!-- ==================== Dist Target ===================================== -->


<!--

  The "dist" target creates a binary distribution of your application
  in a directory structure ready to be archived in a tar.gz or zip file.
  Note that this target depends on two others:
  * "deploy" so that the entire web application (including external
    dependencies) will have been assembled
  * "javadoc" so that the application Javadocs will have been created

-->

  <target name="dist" depends="deploy,javadoc"
   description="Create binary distribution">

    <!-- Copy documentation subdirectory -->
    <copy    todir="${dist.home}/docs">
      <fileset dir="docs"/>
    </copy>

    <!-- Create application WAR file -->
    <jar jarfile="${dist.home}/${app.name}.war"
         basedir="${deploy.home}"/>

    <!-- Create application JAR file -->
    <jar jarfile="${dist.home}/${app.name}.jar"
         basedir="${deploy.home}/WEB-INF/classes"/>

    <!-- Copy additional files to ${dist.home} as necessary -->

  </target>

	  <target name="ugPortal_portlet_dist" depends="compile"
	   description="Create binary distribution">

	    <!-- Copy documentation subdirectory -->
	  	<!--
	    <copy    todir="${dist.home}/docs">
	      <fileset dir="docs"/>
	    </copy>
		-->
	    <!-- Create application WAR file -->
	    <jar jarfile="${ugportal.dist.home}/${ugportal.app.name}.war"
	         basedir="${build.home}"/>

	    <!-- Create application JAR file -->
	  	<!--
	    <jar jarfile="${ugportal.dist.home}/${ugportal.app.name}.jar"
	         basedir="${build.home}/WEB-INF/classes"/>
		-->
	    <!-- Copy additional files to ${dist.home} as necessary -->

	  </target>



<!-- ==================== Javadoc Target ================================== -->

<!--

  The "javadoc" target creates Javadoc API documentation for the Java
  classes included in your application.  Normally, this is only required
  when preparing a distribution release, but is available as a separate
  target in case the developer wants to create Javadocs independently.

-->

  <target name="javadoc" description="Create Javadoc API documentation">

    <mkdir dir="${dist.home}/docs/api"/>
    <javadoc sourcepath="source"
           classpathref="compile.classpath"
                destdir="${dist.home}/docs/api"
           packagenames="org.jasig.portal.*"
                 access="public"
                 author="true"
                version="true"
            windowtitle="${app.name} ${app.version} API Documentation">
      <doctitle><![CDATA[${app.name} ${app.version}<br/>API Documentation]]></doctitle>
      <header><![CDATA[${app.name} ${app.version}<br/>API Documentation]]></header>
    </javadoc>

  </target>



<!-- ==================== Prepare Target ================================== -->

<!--

  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.

-->

  <target name="prepare">

    <!-- Create build directory and copy static content -->
    <mkdir  dir="${build.home}"/>
    <copy todir="${build.home}">
      <fileset dir="webpages"/>
    </copy>

    <!-- Copy static files from external dependencies as needed -->

  </target>


<!-- ==================== initportal Target ================================ -->

<!--

  The "initportal" target runs all the targets necessary to deploy the portal
  and prepare the portal database: deploy, db, i18n-db, pubchan, pubfragments
  
-->
  
  <target name="initportal" 
   description="Runs all the targets necessary to deploy the portal and prepare the portal database">
    <echo message="Initializing uPortal"/> 
    <antcall target="deploy"/>   
    <antcall target="db"/>   
    <antcall target="i18n-db"/>   
    <antcall target="pubchan">
      <param name="channel" value="all"/>
    </antcall>   
    <antcall target="pubfragments">
      <param name="fragmentFile" value="/properties/al/fragments.xml"/>
    </antcall>
    <antcall target="deployPortletApp">
      <param name="portletApp" value="all"/>
    </antcall>
    <echo message="Finished initializing uPortal"/>
  </target>
  


<!-- ==================== DbLoader Target ================================= -->

<!--

  The "db" target runs uPortal's DbLoader program to load the database.
  WARNING: THIS MAY ERASE EXISTING uPORTAL TABLES!!!

  The "db" target accepts command line arguments which override values
  read from the dbloader.xml file:

  The "db" target can be invoked thusly:

  To use /properties/db/mytables.xml instead of the tables file specified in
  dbloader.xml:

  ant db -Dusetable=-t -Dtablefile=/properties/db/mytables.xml

  To use /properties/db/mydata.xml instead of the data file specified in
  dbloader.xml:

  ant db -Dusedata=-d -Ddatafile=/properties/db/mydata.xml

  Note: the tables and data files can both be overridden by combining the
  arguments.  The usetable and tablefile must be used in tandem and
  sequentially on the command line. Similarly, usedata and datafile must but
  used in tandem.

  Addtionally, several other boolean flags may be overridden.

  To set createScript=true
  ant db -Dcreatescript=-c

  To set createScript=false
  ant db -Dcreatescript=-nc

  To set dropTables=true
  ant db -Ddroptables=-D

  To set dropTables=false
  ant db -Ddroptables=-nD

  To set createTables=true
  ant db -Dcreatetables=-C

  To set createTables=false
  ant db -Dcreatetables=-nC

  To set populateTables=true
  ant db -Dpopulatetables=-P

  To set populateTables=false
  ant db -Dpopulatetables=-nP

  The -c, -nc, -D, -nD, -C, -nC, -P, -nP arguements may all be used
  independantly or in any combination although it would not make sense to,
  for example, use both -c and -nc.
-->


  <target name="db" depends="compile"
   description="Loads database tables and data">
    <echo message="Invoking DbLoader"/>
    <property name="usetable" value=" "/>
    <property name="tablefile" value=" "/>
    <property name="usedata" value=" "/>
    <property name="datafile" value=" "/>
    <property name="createscript" value=" "/>
    <property name="droptables" value=" "/>
    <property name="createtables" value=" "/>
    <property name="populatetables" value=" "/>
    <property name="localeaware" value=" "/>
    <property name="adminlocale" value=" "/>
    <java fork="true" dir="${basedir}" classname="org.jasig.portal.tools.dbloader.DbLoader">
      <classpath>
        <pathelement path="${build.home}/WEB-INF/classes"/>
        <path refid="compile.classpath"/>
      </classpath>

      <arg value="${usetable}"/>
      <arg value="${tablefile}"/>
      <arg value="${usedata}"/>
      <arg value="${datafile}"/>
      <arg value="${createscript}"/>
      <arg value="${droptables}"/>
      <arg value="${createtables}"/>
      <arg value="${populatetables}"/>
      <arg value="${localeaware}"/>
      <arg value="${adminlocale}"/>
    </java>
  </target>

  <target name="i18n-db" depends="compile"
    description="Loads internationalization tables and data">
    <echo message="Invoking DbLoader for internationalized database setting"/>
    <property name="usetable" value="-t"/>
    <property name="tablefile" value="/properties/db/tables-i18n.xml"/>
    <property name="usedata" value="-d"/>
    <property name="datafile" value="/properties/db/data-i18n.xml"/>
    <property name="createscript" value=" "/>
    <property name="droptables" value=""/>
    <property name="createtables" value=" "/>
    <property name="populatetables" value=" "/>
    <java fork="true" dir="${basedir}" classname="org.jasig.portal.tools.dbloader.DbLoader">
      <classpath>
        <pathelement path="${build.home}/WEB-INF/classes"/>
        <path refid="compile.classpath"/>
      </classpath>

      <arg value="${usetable}"/>
      <arg value="${tablefile}"/>
      <arg value="${usedata}"/>
      <arg value="${datafile}"/>
      <arg value="${createscript}"/>
      <arg value="${droptables}"/>
      <arg value="${createtables}"/>
      <arg value="${populatetables}"/>
    </java>
  </target>

  <target name="l10n-db" depends="compile"
    description="Loads localized data">
    <echo message="Invoking DbLoader for localizationed database setting"/>
    <property name="locale" value="en_US"/>
    <property name="usetable" value="-t"/>
    <property name="tablefile" value="/properties/db/tables-l10n.xml"/>
    <property name="usedata" value="-d"/>
    <property name="datafile" value="/properties/db/data-l10n.xml"/>
    <property name="createscript" value=" "/>
    <property name="droptables" value=" "/>
    <property name="createtables" value=""/>
    <property name="populatetables" value=" "/>
    <property name="localeaware" value="-l"/>
    <property name="adminlocale" value="en_US"/>
    <java fork="true" dir="${basedir}" classname="org.jasig.portal.tools.dbloader.DbLoader">
      <classpath>
        <pathelement path="${build.home}/WEB-INF/classes"/>
        <pathelement path="${xalan.jar}"/>
        <pathelement path="${xercesImpl.jar}"/>
        <pathelement path="${xml-apis.jar}"/>
        <pathelement path="${oro.jar}"/>
        <pathelement path="${log4j.jar}"/>
        <pathelement path="${jdbcDriver.jar}"/>
      </classpath>

      <arg value="${usetable}"/>
      <arg value="${tablefile}"/>
      <arg value="${usedata}"/>
      <arg value="${datafile}"/>
      <arg value="${createscript}"/>
      <arg value="${droptables}"/>
      <arg value="${createtables}"/>
      <arg value="${populatetables}"/>
      <arg value="${localeaware}"/>
      <arg value="${adminlocale}"/>
    </java>
  </target>

<!-- ==================== DbUnload Target ================================= -->

<!--

  The "dbunload" target runs uPortal's DbUnload program to dump a database table.
  to run this target, you must specify the table name and output file parameters
  on the command line.
  For example:

  ant dbunload -Dtablename=up_channel -Dxmlfile=-
-->


  <target name="dbunload" depends="compile"
   description="Dumps a database table to a flat file in XML format">
    <echo message="Invoking DbUnload"/>
    <property name="tablename" value=" "/>
    <property name="xmlfile" value=" "/>
    <java fork="true" dir="${basedir}" classname="org.jasig.portal.tools.dbloader.DbUnload">
      <classpath>
        <pathelement path="${build.home}/WEB-INF/classes"/>
        <path refid="compile.classpath"/>
      </classpath>
      <arg value="${tablename}"/>
      <arg value="${xmlfile}"/>
    </java>
  </target>

<!-- ==================== DbTest Target ================================= -->

<!--

  The "dbtest" target runs uPortal's DbTest program to display information
  about the database defined in rdbm.properties

  ant dbtest
-->


  <target name="dbtest" depends="compile"
   description="Displays information about the database defined in rdbm.properties">
    <echo message="Invoking DbTest"/>
    <java fork="true" dir="${basedir}" classname="org.jasig.portal.tools.DbTest">
      <classpath>
        <pathelement path="${build.home}/WEB-INF/classes"/>
        <path refid="compile.classpath"/>
      </classpath>
    </java>
  </target>



<!-- ========= The fragment loader for aggregated layouts =========  -->
<!--
     
     The variable fragmentFile points to the XML file of the fragments definition

     ant pubfragments -DfragmentFile=/properties/al/fragments.xml

-->


  <target name="pubfragments" depends="compile"
   description="Loads fragments into the uPortal database">
    <property name="tempDataXML" value="/properties/al/fragment.temp.data.xml"/>
    <property name="fragmentFile" value=" "/>
    <echo message="Resetting layout fragments configuration."/>
    <!-- create data.xml file -->
    <java fork="true" dir="${basedir}" failonerror="true" classname="org.jasig.portal.layout.utils.FragmentLoader">
        <arg value="${fragmentFile}"/>
        <arg value="${build.home}/WEB-INF/classes/${tempDataXML}"/>
        <classpath>
            <pathelement path="${build.home}/WEB-INF/classes"/>
            <path refid="compile.classpath"/>
        </classpath>
    </java>
    <!-- load data.xml file -->
    <echo message="Loading new fragments into the database."/>
    <java fork="true" dir="${build.home}/WEB-INF/classes"
          classname="org.jasig.portal.tools.dbloader.DbLoader">
        <arg value="-d"/>
        <arg value="${tempDataXML}"/>
        <arg value="-nC"/>
        <arg value="-nD"/>
        <arg value="-P"/>
        <classpath>
            <pathelement path="${build.home}/WEB-INF/classes"/>
            <path refid="compile.classpath"/>
        </classpath>
    </java>
    <delete file="${build.home}/WEB-INF/classes/${tempDataXML}"/>
    <echo message="Done updating fragment configuration."/>
  </target>



<!-- ==================== md5passwd Target ================================ -->

<!--

  The "md5passwd" target runs uPortal's md5passwd program to create an entry for
  a user in the UP_PERSON_DIR table. To run this target, you must specify
  the username parameter in the command line.  For example:

  ant md5passwd -Dusername=ken

-->


  <target name="md5passwd" depends="compile"
   description="Creates a user in the UP_PERSON_DIR table">
    <echo message="Invoking md5passwd"/>
    <property name="username" value=" "/>
    <java dir="${basedir}" classname="org.jasig.portal.security.md5passwd">
      <classpath>
        <pathelement path="${build.home}/WEB-INF/classes"/>
        <path refid="compile.classpath"/>
      </classpath>
      <arg value="-c"/>
      <arg value="${username}"/>
    </java>
  </target>



<!-- ==================== deluser Target ============================ -->
<!--
   The deluser target runs uPortal's DeleteUser program to delete all
   traces of a uportal user from the uPortal database.
   Examples:
   ant deluser -Duser=username
   ant deluser -Duser=ashenoy
-->

  <target name="deluser" 
   description="Delete traces of a user from the portal database">
    <echo message="Invoking DeleteUser"/>
    <property name="user" value=" "/>
    <java dir="${basedir}" classname="org.jasig.portal.tools.DeleteUser" fork="true" >
      <classpath>
        <pathelement path="${build.home}/WEB-INF/classes"/>
        <path refid="compile.classpath"/>
      </classpath>
      <arg value="${user}"/>
    </java>
  </target>



<!-- ==================== regchantype Target ============================== -->

<!--

  The "regchantype" target runs uPortal's RegisterChannelType program to
  create an entry for a new generic channel in the UP_CHAN_TYPE table.
  To run this target, you must specify the class, name, description, and
  uri parameters in the command line.  For example:

  ant regchantype
    -Dclass=org.jasig.portal.channels.CImage
    -Dname="Image Channel"
    -Ddescription="Displays image with optional title and subtitle"
    -Duri=/org/jasig/portal/channels/CImage/CImage.cpd

-->


  <target name="regchantype" depends="compile"
   description="Registers a new channel type">
    <echo message="Invoking RegisterChannelType"/>
    <property name="class" value=" "/>
    <property name="name" value=" "/>
    <property name="description" value=" "/>
    <property name="uri" value=" "/>
    <java dir="${basedir}" classname="org.jasig.portal.tools.RegisterChannelType">
      <classpath>
        <pathelement path="${build.home}/WEB-INF/classes"/>
        <path refid="compile.classpath"/>
      </classpath>
      <arg value="${class}"/>
      <arg value="${name}"/>
      <arg value="${description}"/>
      <arg value="${uri}"/>
    </java>
  </target>



<!-- ==================== addstylesheet Target ============================ -->

<!--

  The "addstylesheet" target runs uPortal's RegisterStylesheet program to
  add core framework stylesheets used to create structures and themes.

  Example:

  ant addstylesheet
    -DstylesheetType=-t
    -DstylesheetUri=/org/jasig/portal/layout/tab-column/nested-tables/nested-tables.xsl
    -DdescriptionUri=/org/jasig/portal/layout/tab-column/nested-tables/nested-tables.sdf

  where -s = specify structure stylesheet
        -t = specify theme stylesheet

-->


  <target name="addstylesheet" depends="compile"
   description="Registers a new theme or structure">
    <echo message="Invoking RegisterStylesheet (add)"/>
    <property name="stylesheetType" value=" "/>
    <property name="stylesheetUri" value=" "/>
    <property name="descriptionUri" value=" "/>
    <java dir="${basedir}" fork="true" classname="org.jasig.portal.tools.RegisterStylesheet">
      <classpath>
        <pathelement path="${build.home}/WEB-INF/classes"/>
        <path refid="compile.classpath"/>
      </classpath>
      <arg value="${stylesheetType}"/>
      <arg value="${stylesheetUri}"/>
      <arg value="${descriptionUri}"/>
    </java>
  </target>


<!-- ==================== modstylesheet Target ============================ -->

<!--

  The "modstylesheet" target runs uPortal's RegisterStylesheet program to
  update core framework stylesheets used to create structures and themes.

  Example:

  ant modstylesheet
    -DstylesheetType=-s
    -DstylesheetUri=/org/jasig/portal/layout/tab-column/tab-column.xsl
    -DdescriptionUri=/org/jasig/portal/layout/tab-column/tab-column.sdf
    -DstylesheetId=1

  where -s = specify structure stylesheet
        -t = specify theme stylesheet

-->


  <target name="modstylesheet" depends="compile"
   description="Modifies an existing theme or structure">
    <echo message="Invoking RegisterStylesheet (modify)"/>
    <property name="stylesheetType" value=" "/>
    <property name="stylesheetUri" value=" "/>
    <property name="descriptionUri" value=" "/>
    <property name="stylesheetId" value=" "/>
    <java dir="${basedir}" fork="true" classname="org.jasig.portal.tools.RegisterStylesheet">
      <classpath>
        <pathelement path="${build.home}/WEB-INF/classes"/>
        <path refid="compile.classpath"/>
      </classpath>
      <arg value="${stylesheetType}"/>
      <arg value="-u"/>
      <arg value="${stylesheetUri}"/>
      <arg value="${descriptionUri}"/>
      <arg value="${stylesheetId}"/>
    </java>
  </target>



<!-- ==================== delstylesheet Target ============================ -->

<!--

  The "delstylesheet" target runs uPortal's RegisterStylesheet program to
  delete core framework stylesheets used to create structures and themes.

  Example:

  ant delstylesheet -DstylesheetType=-t -DstylesheetId=1

  where -s = specify structure stylesheet
        -t = specify theme stylesheet

-->


  <target name="delstylesheet" depends="compile"
   description="Deletes an existing theme or structure">
    <echo message="Invoking RegisterStylesheet (delete)"/>
    <property name="stylesheetType" value=" "/>
    <property name="stylesheetId" value=" "/>
    <java dir="${basedir}" classname="org.jasig.portal.tools.RegisterStylesheet">
      <classpath>
        <pathelement path="${build.home}/WEB-INF/classes"/>
        <path refid="compile.classpath"/>
      </classpath>
      <arg value="${stylesheetType}"/>
      <arg value="-d"/>
      <arg value="${stylesheetId}"/>
    </java>
  </target>



<!-- ====================== compiletests Target =========================== -->

<!--

  Compiles JUnit tests.

-->


  <target name="compiletests" depends="compile"
   description="Compile JUnit Tests">
    <javac srcdir="tests"
          destdir="${build.home}/WEB-INF/classes"
            debug="${compile.debug}"
      deprecation="${compile.deprecation}"
         optimize="${compile.optimize}">
      <classpath refid="tests.classpath"/>
    </javac>

    <!-- Copy everything in media except for the source files -->
    <copy  todir="${build.home}/WEB-INF/classes">
      <fileset dir="tests" excludes="CVS,**/*.java"/>
    </copy>
  </target>



<!-- ======================= runtests Target ============================== -->

<!--

  Runs all uPortal JUnit-based test code

-->


  <target name="runtests" depends="compiletests" description="Run JUnit Test Suite">
    <java fork="true" classname="org.jasig.portal.AllTests">
      <classpath>
       <path refid="tests.classpath"/>
       <path location="${build.home}/WEB-INF/classes"/>
      </classpath>
    </java>
  </target>



<!-- ======================= swingtests Target ============================ -->

<!--

  Run JUnit tests with Swing.

-->


  <target name="swingtests" depends="compiletests" description="Run JUnit Test Suite">
    <java fork="true" classname="junit.swingui.TestRunner">
      <classpath>
       <path refid="tests.classpath"/>
       <path location="${build.home}/WEB-INF/classes"/>
      </classpath>
      <arg value="org.jasig.portal.AllTests"/>
    </java>
  </target>



<!-- ==================== RunXSLT Target ================================ -->

<!--

  The "RunXSLT" target runs uPortal's RunXSLT program to perform an xsl
  transform using uPortal XML libraries.  For example:

 ant RunXSLT -DXmlInput=UP_SEQUENCE_20.XML -DoutputFile=NEW_UP_SEQUENCE.XML -DXslfile=UP_SEQUENCE.xsl

 where XmlInput is the file to be transformed,
 outputFile is where the result should saved and
 Xslfile is the URL(!) of the xsl file to be used in the transform.

-->


  <target name="runxslt" depends="compile"
   description="Performs an XSLT transformation">
    <echo message="Invoking RunXSLT"/>
    <mkdir    dir="${build.home}/RunXSLT"/>
    <copy todir="${build.home}/RunXSLT" >
      <fileset dir="${build.home}/stylesheets/org/jasig/portal/tools/RunXSLT"/>
    </copy>

    <property name="XmlInput" value=" "/>
    <property name="Xslfile" value=" "/>
    <property name="outputFile" value=" "/>
    <java fork="true" dir="${basedir}" classname="org.jasig.portal.tools.RunXSLT">
      <classpath>
        <pathelement path="${build.home}"/>
        <pathelement path="${build.home}/WEB-INF/classes"/>
        <path refid="compile.classpath"/>
      </classpath>
      <arg value="${build.home}/RunXSLT/${XmlInput}"/>
      <arg value="file:${build.home}/RunXSLT/${Xslfile}"/>
      <arg value="${build.home}/RunXSLT/${outputFile}"/>
    </java>
  </target>



<!-- ==================== pubchan Target ================================ -->

<!--

  The "pubchan" target runs the ChannelPublisher tool.
  Channel definitions are defined in XML files.  Each
  channel definition is published or modified if one 
  already existed with the same functional name.  You
  can publish all the channel definitions at once or just
  one at a time.
  Examples:
  ant pubchan -Dchannel=all
  ant pubchan -Dchannel=daily-business-cartoon.xml

-->


  <target name="pubchan" description="Publishes channels" depends="compile">
    <echo message="Invoking Channel Publisher Tool"/>

    <property name="channel" value=" "/>
    <java fork="true" dir="${basedir}" classname="org.jasig.portal.tools.chanpub.ChannelPublisher">
      <classpath>
          <pathelement path="${build.home}/WEB-INF/classes"/>
          <path refid="compile.classpath"/>
      </classpath>
      <arg value="-n"/>
      <arg value="${channel}"/>
    </java>
  </target>


<!-- ===================== deployPortletApp Target ========================= -->

<!--

  The "deployPortletApp" target runs the portlet Deployer tool.
  This tool takes a portlet WAR file, rewrites the web.xml file
  and deploys the results to the servlet container.  You can deploy
  multiple portlets at once by placing them in the lib/portlets
  directory and specifying "all" as the porletApp.
  Examples:
  ant deployPortletApp -DportletApp=all
  ant deployPortletApp -DportletApp=C:/TEMP/myPortlet.war

-->

  
  <target name="deployPortletApp" description="Deploys a portlet application" depends="compile">
    <echo message="Invoking Portlet Application Deployment Tool"/>
        
    <property name="portletApp" value=" "/>
    <java fork="true" dir="${basedir}" classname="org.jasig.portal.container.deploy.Deployer">
      <classpath>
        <pathelement path="${build.home}/WEB-INF/classes"/>
        <path refid="compile.classpath"/>
      </classpath>
      <arg value="${deploy.home}/.."/>
      <arg value="${portletApp}"/>
    </java>
  </target>

	  <target name="deploy_ugPortal_PortletApp" description="Deploys a portlet application" depends="compile">
	    <echo message="Invoking Portlet Application Deployment Tool"/>
	    <property name="portletApp" value=" "/>
	    <java fork="true" dir="${uPortal.basedir}" classname="org.jasig.portal.container.deploy.Deployer">
	      <classpath>
	        <pathelement path="${uPortal.build.home}/WEB-INF/classes"/>
	        <path refid="compile.classpath"/>
	      </classpath>
	      <arg value="${ugportal.deploy.home}/.."/>
	      <arg value="${portletApp}"/>
	    </java>
	  </target>

</project>
