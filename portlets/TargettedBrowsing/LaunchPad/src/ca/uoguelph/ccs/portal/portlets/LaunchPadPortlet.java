package ca.uoguelph.ccs.portal.portlets;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Map;
import javax.portlet.*;
import ca.uoguelph.ccs.portal.portlets.MySQL;


/**
 * LaunchPad Portlet.
 *  
 */
public class LaunchPadPortlet extends GenericPortlet {

    private MySQL db;
	private Map userInfo;
	private String test;
	private String filterClause;

	/**
	 * Initializes the LaunchPad class variables.
	 */
	public LaunchPadPortlet() {
		super();
		// Initialize
		this.db = new MySQL();
		this.userInfo = null;
		this.filterClause = "";
		this.test = "Test string worked!";
	}

    /**
     * Open a connection to the LaunchPad db.
     * @param db the MySQL db object being used.
     * @return The database Connection object.
     */
    private Connection dbConnect() {
		String host = "jtey.com";
		String database = "scbvviau_testing";
		String user = "scbvviau_ccs";
		String pass = "portal";
		try {
		    this.db.testDriver();
            return this.db.getConnection(host, database, user, pass);
        } catch (Exception e) {
            return null;
        }
    }
    /* (non-Javadoc)
     * @see javax.portlet.Portlet#processAction(javax.portlet.ActionRequest, javax.portlet.ActionResponse)
     */
    public void processAction(ActionRequest request,
			ActionResponse actionResponse) throws PortletException,
			java.io.IOException {
		//corresponding action to test4.jsp part1:'checkAction'
		String removeName = request.getParameter("remove");
		if (removeName != null) // remove
		{
			PortletPreferences prefs = request.getPreferences();
			prefs.reset(removeName);
			prefs.store();
		}

		String add = request.getParameter("add");
		if (add != null) // add
		{
			PortletPreferences prefs = request.getPreferences();
			prefs.setValue(request.getParameter("name"), request
					.getParameter("value"));
			prefs.store();
		}

	}
	/* (non-Javadoc)
	 * @see javax.portlet.GenericPortlet#doView(javax.portlet.RenderRequest, javax.portlet.RenderResponse)
	 */
	public void doView(RenderRequest request, RenderResponse response)
			throws PortletException, IOException {	    

		response.setContentType("text/html");
		PrintWriter out = response.getWriter();
		
		// Initialize the user attributes map
		this.userInfo = (Map)request.getAttribute(PortletRequest.USER_INFO);
		this.filterClause = "";
		String username = request.getRemoteUser();
		
		// Retrieve usefull attributes
		String contextPath = (String)request.getContextPath();
		String displayName = (String)this.userInfo.get("displayName");
		
		/*
		 * Setup user attribute bookmark filters
		 */
		this.setAttributeFilter("classLevel");
		this.setAttributeFilter("uPortalTemplateUserName");
		
        // Display a header
		out.println("<table cellspacing=0 cellpadding=10><tr><td>");
		out.println("<img src=\""+contextPath+"/img/gryphon.gif\" align=left><div class=\"portlet-font\" style=\"font-size:larger\"><b>"+displayName+"'s LaunchPad</b></h1>");
		out.println("</td></tr></table>");
        
		// Display the bookmark list
		ResultSet rs = getBookmarkList();
        out.println(renderBookmarkList(rs,true));
		
        out.flush();
	}
    /* (non-Javadoc)
	 * @see javax.portlet.GenericPortlet#doEdit(javax.portlet.RenderRequest, javax.portlet.RenderResponse)
	 */
	public void doEdit(RenderRequest request, RenderResponse response)
			throws PortletException, IOException {
		response.setContentType("text/html");
		PrintWriter out = response.getWriter();
		
		ResultSet rs = getBookmarkList();
        out.println(renderBookmarkList(rs,true));
	}

    /**
     * @return the bookmark ResultSet.
     */
    private ResultSet getBookmarkList() {
		// Interrogate the DB
		Connection con = this.dbConnect();
		String query = "";
		// Retrieve the relevant bookmarks for this user
		query = "SELECT DISTINCT "
			+ "bc.name as category, "
			+ "b.name as name, "
			+ "b.URL as URL "
			+ "FROM "
			+ "bookmark_categories bc, "
			+ "bookmarks b, "
			+ "groups g, "
			+ "group_bookmarks gb "
			+ "WHERE "
			+ "g.group_id = gb.group_id AND "
			+ "b.bookmark_id = gb.bookmark_id AND "
			+ "bc.category_id = b.bookmark_category AND "
			+ "("
			+ "(g.group_id = 1) "
			+ "OR"
			+ this.filterClause
			+ ")"
			+ "ORDER BY bc.sort_order, b.name";
		System.out.println(query);
		return this.queryDB(con, query);
    }

    /**
     * Renders the bookmark result set into formatted HTML.
     * @param rs the bookmark result set generated by getBookmarkList().
     * @return the formatted bookmark list's HTML block.
     */
    private String renderBookmarkList(ResultSet rs, boolean editMode) {
		String html = "";
		String thisCategory = "";
		String prevCategory = "";
		String linkName = "";
    	String linkURL = "";
    	
		html += "<table cellspacing=0 cellpadding=10><tr><td>";
		try {
            while( rs.next() ){
            
            	thisCategory = (rs.getObject("category").toString());
            	linkName = (rs.getObject("name").toString());
            	linkURL = (rs.getObject("URL").toString());
            	
            	// Display category name when needed
            	if( !thisCategory.equals(prevCategory) ){
            	    html += "<br /><b>"+thisCategory+"</b><br />";
            		prevCategory = thisCategory;
            	}
            	
            	// Display bookmark
            	html += "<a href=\""+linkURL+"\" target=\"_blank\">"+linkName+"</a><br />";
            
            }
        } catch (SQLException e) {
            html += "<b>SQL Error.</b><br />";
        }
        html += "</td></tr></table>";
		
		return html;
    }
	
	/**
	 * Registers the specified user attribute into the
	 * master SQL statement as a filter for bookmarks. 
     * @param attrName the attribute name.
     * @param attrValue the value-to-match criteria for the attribute.
     * @return The value of the specified attribute.
     */
    private void setAttributeFilter(String attrName) {
        
        // this line does not work, the attr map is null at this point
        // TO BE FIXED. -jtey
        String attrValue = (String)this.userInfo.get(attrName);
        
        this.filterClause += this.filterClause.length()>0 ? " OR " : "";
        this.filterClause += "(g.attributeName=\""+attrName+"\" AND g.attributeValue=\""+attrValue+"\") ";
    }

    /**
	 * Executes an SQL query on the LaunchPad db
	 * @param con the open MySQL db connection instance to use.
     * @param query the SQL query to execute.
     * @return The ResultSet object.
     */
    private ResultSet queryDB(Connection con, String query) {
		ResultSet rs = null;
        try {
            rs = this.db.getResultSet(con, query);
        } catch (Exception e1) {
            e1.printStackTrace();
        }
        return rs;
    }

}